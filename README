Introduction:
-------------

This file is a part of ebsc, the embedded libbsc from Ilya Grebnov.
The code was converted to C++, and embedded in a single header & 
source for easy integration in any project.

bsc and/or libbsc are a program and a library for
lossless, block-sorting data compression.

bsc is a high performance file compressor based on lossless,
block-sorting data compression algorithms.

libbsc is a library based on bsc, it uses the same algorithms
as bsc and enables you to compress memory blocks.

Copyright (c) 2009-2012 Ilya Grebnov <ilya.grebnov@gmail.com>
Copyright (c) 2013 Cyril Russo <boite.pour.spam@gmail.com>

See file AUTHORS for a full list of contributors.

See the bsc and libbsc web site:
  http://libbsc.com/ for more information.


Software License:
-----------------

Copyright (c) 2009-2012 Ilya Grebnov <ilya.grebnov@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Please see the file LICENSE for full copyright information and file AUTHORS
for full list of contributors.

See also the bsc and libbsc web site:
  http://libbsc.com/ for more information.

Cyril RUSSO modified the initial code to remove any link with patented Sort 
Transform algorithm, GPU implementation, and merged all files in a single 
header & source for easy embedding in any project.

Memory usage:
-------------

bsc compresses large files in blocks. Multiple blocks can be processed in
parallel on multiple-core CPU. At decompression time, the block size used
for compression is read from the header of the compressed file. The block
size and number of blocks processed in parallel affects both the compression
ratio achieved, and the amount of memory needed for compression and decompression.
Compression and decompression requirements are the same and in bytes, can
be estimated as 16Mb + 5 x block size x number of blocks processed in parallel.


Special notes:
--------------
You need to provide your own Adler32 checksum code and memory allocation functions. 
If this proves a pain for you, you can get back the original code from libbsc.


libdivsufsort:
--------------

The libdivsufsort project provides a fast, lightweight, and robust
C API library to construct the suffix array and the Burrows-Wheeler
transformed string for any input string of a constant-size alphabet.
libbsc uses libdivsufsort for constructing Burrows-Wheeler transform.

The libdivsufsort copyright is as follows:

Copyright (c) 2003-2008 Yuta Mori All Rights Reserved.

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

See also the libdivsufsort web site:
  http://libdivsufsort.googlecode.com/ for more information.
